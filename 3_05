import numpy as np

a=np.array([[1.0,2],[2,5],[-13.56,56]])
print(a)

#[[  1.     2.  ]
#[  2.     5.  ]
#[-13.56  56.  ]]


a.shape
#(3, 2)


np.zeros((4,4))     #u argumentu ima samo JEDAN argument koji predstavlja shape niza koji pravimo

#array([[0., 0., 0., 0.],
#       [0., 0., 0., 0.],
#       [0., 0., 0., 0.],
#       [0., 0., 0., 0.]])


np.ones((4,4)) 

#array([[1., 1., 1., 1.],
#      [1., 1., 1., 1.],
#      [1., 1., 1., 1.],
#      [1., 1., 1., 1.]])


a=np.ones((4,4))
print(a)
5*a

#[[1. 1. 1. 1.]
# [1. 1. 1. 1.]
# [1. 1. 1. 1.]
# [1. 1. 1. 1.]]
#array([[5., 5., 5., 5.],
#       [5., 5., 5., 5.],
#       [5., 5., 5., 5.],
#       [5., 5., 5., 5.]])


np.empty((5,))
#array([0.  , 0.25, 0.5 , 0.75, 1.  ])

np.empty((5,1))

#array([[0.  ],
#       [0.25],
#       [0.5 ],
#       [0.75],
#       [1.  ]])


np.empty((5,3))#vraca zateceno stanje iz memorije (ostalo od nekog prethodnog koriscenja odgovarajucih bajtovi memoriji)

#array([[2.5549502e-316, 0.0000000e+000, 0.0000000e+000],
#       [0.0000000e+000, 0.0000000e+000, 0.0000000e+000],
#       [0.0000000e+000, 0.0000000e+000, 0.0000000e+000],
#       [0.0000000e+000, 0.0000000e+000, 0.0000000e+000],
#       [0.0000000e+000, 0.0000000e+000, 0.0000000e+000]])


np.empty((10,))

#array([2.56167978e-316, 1.77863633e-322, 0.00000000e+000, 0.00000000e+000,
#       0.00000000e+000, 1.21583514e-046, 7.61456465e+169, 5.58649168e-091,
#       2.05989960e+184, 8.47173015e-315])


np.empty((5,0))
#array([], shape=(5, 0), dtype=float64)

np.arange(1,11)       #radi veoma slicno kao range samo sto kreira numpy niz
#array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])

np.arange(1,-11,-1)
#array([  1,   0,  -1,  -2,  -3,  -4,  -5,  -6,  -7,  -8,  -9, -10])

np.arange(1,-11,1)
#array([], dtype=int64)


np.arange(1,-11,-0.1)        #za razliku od python-ovog range-a step moze biti realan

#array([ 1.00000000e+00,  9.00000000e-01,  8.00000000e-01,  7.00000000e-01,
#        6.00000000e-01,  5.00000000e-01,  4.00000000e-01,  3.00000000e-01,
#        2.00000000e-01,  1.00000000e-01,  2.22044605e-16, -1.00000000e-01,
#       -2.00000000e-01, -3.00000000e-01, -4.00000000e-01, -5.00000000e-01,
#       -6.00000000e-01, -7.00000000e-01, -8.00000000e-01, -9.00000000e-01,
#       -1.00000000e+00, -1.10000000e+00, -1.20000000e+00, -1.30000000e+00,
#       -1.40000000e+00, -1.50000000e+00, -1.60000000e+00, -1.70000000e+00,
#       -1.80000000e+00, -1.90000000e+00, -2.00000000e+00, -2.10000000e+00,
#       -2.20000000e+00, -2.30000000e+00, -2.40000000e+00, -2.50000000e+00,
#       -2.60000000e+00, -2.70000000e+00, -2.80000000e+00, -2.90000000e+00,
#       -3.00000000e+00, -3.10000000e+00, -3.20000000e+00, -3.30000000e+00,
#       -3.40000000e+00, -3.50000000e+00, -3.60000000e+00, -3.70000000e+00,
#       -3.80000000e+00, -3.90000000e+00, -4.00000000e+00, -4.10000000e+00,
#       -4.20000000e+00, -4.30000000e+00, -4.40000000e+00, -4.50000000e+00,
#       -4.60000000e+00, -4.70000000e+00, -4.80000000e+00, -4.90000000e+00,
#       -5.00000000e+00, -5.10000000e+00, -5.20000000e+00, -5.30000000e+00,
#       -5.40000000e+00, -5.50000000e+00, -5.60000000e+00, -5.70000000e+00,
#       -5.80000000e+00, -5.90000000e+00, -6.00000000e+00, -6.10000000e+00,
#       -6.20000000e+00, -6.30000000e+00, -6.40000000e+00, -6.50000000e+00,
#       -6.60000000e+00, -6.70000000e+00, -6.80000000e+00, -6.90000000e+00,
#       -7.00000000e+00, -7.10000000e+00, -7.20000000e+00, -7.30000000e+00,
#       -7.40000000e+00, -7.50000000e+00, -7.60000000e+00, -7.70000000e+00,
#       -7.80000000e+00, -7.90000000e+00, -8.00000000e+00, -8.10000000e+00,
#       -8.20000000e+00, -8.30000000e+00, -8.40000000e+00, -8.50000000e+00,
#       -8.60000000e+00, -8.70000000e+00, -8.80000000e+00, -8.90000000e+00,
#       -9.00000000e+00, -9.10000000e+00, -9.20000000e+00, -9.30000000e+00,
#       -9.40000000e+00, -9.50000000e+00, -9.60000000e+00, -9.70000000e+00,
#       -9.80000000e+00, -9.90000000e+00, -1.00000000e+01, -1.01000000e+01,
#       -1.02000000e+01, -1.03000000e+01, -1.04000000e+01, -1.05000000e+01,
#       -1.06000000e+01, -1.07000000e+01, -1.08000000e+01, -1.09000000e+01])


np.pi
#3.141592653589793

np.linspace(0,1,5)         #np.linspace(od,do,n) vraca niz od n brojeva od kojih je prvi od, poslednji do i svi uzastopni u nizu se razlikuju podjednako
#array([0.  , 0.25, 0.5 , 0.75, 1.  ])

np.linspace(0,2*np.pi,4)
#array([0.        , 2.0943951 , 4.1887902 , 6.28318531])



a

#array([[1., 1., 1., 1.],
#       [1., 1., 1., 1.],
#       [1., 1., 1., 1.],
#       [1., 1., 1., 1.]])


m=np.zeros((4,3))
m

#array([[0., 0., 0.],
#       [0., 0., 0.],
#       [0., 0., 0.],
#       [0., 0., 0.]])


m.reshape((2,6))

#array([[0., 0., 0., 0., 0., 0.],
#       [0., 0., 0., 0., 0., 0.]])


m

#array([[0., 0., 0.],
#       [0., 0., 0.],
#       [0., 0., 0.],
#       [0., 0., 0.]])


m.reshape((12,))

#array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])


m.reshape((12,1))

#array([[0.],
#       [0.],
#       [0.],
#       [0.],
#       [0.],
#       [0.],
#       [0.],
#       [0.],
#       [0.],
#       [0.],
#       [0.],
#       [0.]])


A=np.arange(1,19,1).reshape((6,3))

A

#array([[ 1,  2,  3],
#       [ 4,  5,  6],
#       [ 7,  8,  9],
#       [10, 11, 12],
#       [13, 14, 15],
#       [16, 17, 18]])




print("A[1]:",A[1],"A[1][2]:",A[1][2],"A[-1][1]:",A[-1][1],"A[1,2]:",A[1,2],"A[-1,1]:", A[-1,1])

#A[1]: [4 5 6] A[1][2]: 6 A[-1][1]: 17 A[1,2]: 6 A[-1,1]: 17

